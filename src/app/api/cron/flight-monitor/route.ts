/**
 * Vercel Cron Job endpoint dla monitorowania samolot√≥w
 * Wywo≈Çuje siƒô automatycznie w okre≈õlonych interwa≈Çach
 */

import { NextResponse } from 'next/server';
import { FlightChecker } from '../../../../shared/services/flightChecker';
import { UserConfigService } from '../../../../shared/services/userConfigService';

// Przechowywanie ostatnio widzianych samolot√≥w w pamiƒôci (w produkcji u≈ºyj Redis/Database)
const lastSeenPlanes = new Map<string, number>();

export async function POST() {
  try {
    console.log(`üöÄ Cron job wywo≈Çany: ${new Date().toISOString()}`);
    
    // Pobierz konfiguracjƒô z zmiennych ≈õrodowiskowych lub domy≈õlne warto≈õci
    const expiryMs = parseInt(process.env.FLIGHT_MONITOR_EXPIRY || '300000');

    console.log(`üîç Pobieranie aktywnych u≈ºytkownik√≥w...`);

    // Pobierz wszystkich aktywnych u≈ºytkownik√≥w z bazy danych
    const users = await UserConfigService.getAllActiveUsers();
    
    if (users.length === 0) {
      console.log('‚ö†Ô∏è  Brak aktywnych u≈ºytkownik√≥w do monitorowania');
      return NextResponse.json({
        success: true,
        message: 'Brak aktywnych u≈ºytkownik√≥w',
        timestamp: new Date().toISOString(),
        totalUsers: 0,
        totalPlanes: 0,
        newPlanes: 0,
      });
    }

    console.log(`ÔøΩ Znaleziono ${users.length} aktywnych u≈ºytkownik√≥w`);

    // Wykonaj sprawdzenie dla wszystkich u≈ºytkownik√≥w
    const result = await FlightChecker.checkFlightsForUsers(users, lastSeenPlanes, expiryMs);

    return NextResponse.json({
      success: true,
      timestamp: result.timestamp,
      totalUsers: result.totalUsers,
      totalPlanes: result.totalPlanes,
      newPlanes: result.newPlanes,
      totalTracked: lastSeenPlanes.size,
      userResults: result.userResults, // Szczeg√≥≈Çowe wyniki dla ka≈ºdego u≈ºytkownika
    });

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas sprawdzania samolot√≥w:', error);
    return NextResponse.json(
      { error: 'Server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

// GET endpoint dla testowania
export async function GET() {
  try {
    const users = await UserConfigService.getAllActiveUsers();
    
    return NextResponse.json({
      message: 'Vercel Cron Job endpoint dla monitorowania samolot√≥w',
      usage: 'POST - wywo≈Çuje monitoring | GET - pokazuje status',
      activeUsers: users.length,
      users: users.map(u => ({
        email: u.email,
        location: `${u.latitude.toFixed(4)}, ${u.longitude.toFixed(4)}`,
        radius: `${u.radius}km`,
      })),
      env: {
        expiryMs: process.env.FLIGHT_MONITOR_EXPIRY || '300000 (default)',
      }
    });
  } catch (error) {
    return NextResponse.json({
      message: 'Vercel Cron Job endpoint dla monitorowania samolot√≥w',
      error: 'B≈ÇƒÖd podczas pobierania u≈ºytkownik√≥w',
      details: error instanceof Error ? error.message : 'Unknown error',
    });
  }
}


